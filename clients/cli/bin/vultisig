#!/usr/bin/env node

/**
 * Vultisig CLI Launcher
 *
 * ‚ö†Ô∏è  WARNING: THIS FILE IS AUTO-GENERATED BY scripts/build-final.sh
 * ‚ö†Ô∏è  DO NOT EDIT THIS FILE MANUALLY - Changes will be lost on rebuild!
 * ‚ö†Ô∏è  To modify this file, edit the heredoc in scripts/build-final.sh
 *
 * This launcher:
 * - Sets up polyfills (File API for Node.js)
 * - Configures hybrid fetch (WASM from filesystem, HTTPS via undici)
 * - Loads the SDK with proper WASM support
 * - Initializes the CLI
 */

const path = require('path')
const fs = require('fs')

// TODO: TEMPORARY FIX - Disable TLS verification for SSL certificate issues
// This should be removed once proper certificate handling is implemented
// WARNING: This makes connections insecure and vulnerable to MITM attacks
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'

// File polyfill for Node.js - working version
globalThis.File = function File(chunks, name, options) {
  this.chunks = chunks
  this.name = name
  this.options = options
  const buffer = Buffer.concat(chunks.map(chunk => Buffer.from(chunk)))
  this.buffer = buffer
  this._buffer = buffer
  this.arrayBuffer = function () {
    return Promise.resolve(
      buffer.buffer.slice(
        buffer.byteOffset,
        buffer.byteOffset + buffer.byteLength
      )
    )
  }
}

// Setup hybrid fetch for both WASM and HTTPS (like the test system)
const originalFetch = globalThis.fetch
let undiciFetch

// Lazy-load undici for HTTPS requests
async function getUndiciFetch() {
  if (!undiciFetch) {
    const { fetch: uFetch, setGlobalDispatcher, Agent } = await import('undici')
    // Setup undici with longer timeouts for MPC operations and proper TLS
    setGlobalDispatcher(
      new Agent({
        connect: {
          timeout: 60000,
          // Use Node.js default TLS settings
          rejectUnauthorized: process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0',
        },
        bodyTimeout: 120000,
        headersTimeout: 30000,
      })
    )
    undiciFetch = uFetch
  }
  return undiciFetch
}

globalThis.fetch = async function (url, ...args) {
  const urlString = url.toString()

  // Handle WASM files from local filesystem
  if (urlString.includes('.wasm')) {
    const fs = require('fs')
    const projectRoot = path.resolve(__dirname, '../../..')

    let wasmPath

    if (urlString.includes('wallet-core.wasm')) {
      wasmPath = path.join(
        projectRoot,
        'node_modules/@trustwallet/wallet-core/dist/lib/wallet-core.wasm'
      )
    } else if (urlString.includes('vs_wasm_bg.wasm')) {
      wasmPath = path.join(projectRoot, 'lib/dkls/vs_wasm_bg.wasm')
    } else if (urlString.includes('vs_schnorr_wasm_bg.wasm')) {
      wasmPath = path.join(projectRoot, 'lib/schnorr/vs_schnorr_wasm_bg.wasm')
    } else {
      const filename = urlString.split('/').pop() || ''
      const possiblePaths = [
        path.join(
          projectRoot,
          'node_modules/@trustwallet/wallet-core/dist/lib/',
          filename
        ),
        path.join(projectRoot, 'lib/dkls/', filename),
        path.join(projectRoot, 'lib/schnorr/', filename),
        path.join(projectRoot, 'src/dist/wasm/', filename),
        path.join(projectRoot, 'src/dist/', filename),
      ]

      for (const testPath of possiblePaths) {
        if (fs.existsSync(testPath)) {
          wasmPath = testPath
          break
        }
      }

      if (!wasmPath) {
        throw new Error(`WASM file not found: ${urlString}`)
      }
    }

    try {
      const wasmBuffer = fs.readFileSync(wasmPath)
      const arrayBuffer = wasmBuffer.buffer.slice(
        wasmBuffer.byteOffset,
        wasmBuffer.byteOffset + wasmBuffer.byteLength
      )

      return new Response(arrayBuffer, {
        status: 200,
        statusText: 'OK',
        headers: new Headers({
          'Content-Type': 'application/wasm',
        }),
      })
    } catch (error) {
      throw new Error(`Failed to load WASM file ${wasmPath}: ${error.message}`)
    }
  }

  // For HTTP/HTTPS requests, use undici (better for Node.js)
  try {
    const uFetch = await getUndiciFetch()
    return await uFetch(url, ...args)
  } catch (error) {
    // Fallback to original fetch if available
    if (originalFetch) {
      return originalFetch(url, ...args)
    }
    throw error
  }
}

// Check WebAssembly support
if (typeof globalThis.WebAssembly === 'undefined') {
  console.error('‚ùå WebAssembly not supported in this Node.js version')
  console.error('üí° Please use Node.js 18+ with WebAssembly support')
  process.exit(1)
}

;(async function main() {
  try {
    // Get the directory paths
    const cliDir = __dirname
    const projectRoot = path.resolve(cliDir, '..')
    const sdkPath = path.resolve(projectRoot, '../../src')

    // Require the CommonJS SDK build
    const { Vultisig } = require(path.resolve(sdkPath, 'dist/index.node.cjs'))

    // Make SDK available globally for the CLI
    globalThis.Vultisig = Vultisig

    // Now require the CLI
    require(path.resolve(projectRoot, 'dist/cli.js'))
  } catch (error) {
    console.error('‚ùå Failed to start Vultisig CLI:', error.message)
    console.error('\nüí° Troubleshooting:')
    console.error(
      '   1. Make sure you have built the SDK: cd ../../src && yarn build'
    )
    console.error('   2. Make sure Node.js version is 18+: node --version')
    console.error('   3. Check that WASM files exist in SDK dist directory')
    process.exit(1)
  }
})()
